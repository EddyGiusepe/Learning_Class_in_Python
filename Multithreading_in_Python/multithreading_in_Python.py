#!/usr/bin/env python3
"""
Data Scientist.: Dr. Eddy Giusepe Chirinos Isidro


O que √© multithreading?
=======================
Multithreading √© uma t√©cnica de programa√ß√£o que permite que um programa
execute v√°rios threads (unidades menores de um programa) simultaneamente
dentro do mesmo processo. Cada thread √© executado de forma independente
e pode realizar suas pr√≥prias tarefas, proporcionando a ilus√£o de paralelismo.

Em python, o multithreading pode ser alcan√ßado usando o m√≥dulo Threading.
Este m√≥dulo fornece classes e fun√ß√µes para criar e gerenciar threads.

Python tamb√©m fornece a classe 'concurrent.futures.ThreadPoolExecutor', que
simplifica o gerenciamento de um conjunto de threads para execu√ß√£o simult√¢nea
de fun√ß√µes. Sintaxe:

                    import threading

                    def my_function(value):
                        # C√≥digo a ser executado no thread.
                        pass 
                    # Crie um objeto de thread:
                    my_thread = threading.Thread(target=my_function, args=value)

                    # Inicie a thread:
                    my_thread.start()

                    # Espere o thread finalizar:
                    my_thread.join()
"""

"""
Explana√ß√£o
----------
* O m√©todo start() inicia a execu√ß√£o dos threads. Isso significa que
  "print_numbers" e "print_letters" ser√£o executados simultaneamente em
  threads separados.

* Costuma-se dizer que os 'threads' s√£o executados ao mesmo tempo, mas
  na verdade eles est√£o sendo executados consecutivamente em intervalos
  de tempo alocados para os threads. Voc√™ pode ver na sa√≠da.

* O m√©todo join() bloqueia o thread principal (aquele que iniciou os dois threads)
  at√© que thread1 e thread2 terminem a execu√ß√£o.

* Isso garante que o thread principal n√£o seja encerrado prematuramente e
  aguarde que os dois threads concluam seu trabalho.

Por que Usar?
-------------
* Simultaneidade (Concurrency): Multithreading permite executar m√∫ltiplas tarefas simultaneamente,
                                o que pode melhorar a capacidade de resposta do seu programa.

* Tarefas vinculadas a E/S (I/O-Bound Tasks): √â particularmente √∫til para tarefas E/S-bound, onde
  os threads podem executar opera√ß√µes que n√£o exigem muita CPU, como ler/gravar arquivos, fazer
  solicita√ß√µes de rede ou aguardar a entrada do usu√°rio. Threads podem ceder controle ao aguardar E/S (I/O),
  permitindo que outros threads sejam executados.     
  
"""
import threading
import time

# Criamos uma fun√ß√£o para printar n√∫meros:
def print_numbers():
    for i in range(1, 6):
        print(f"ü¶Üü¶Ü Imprimir o n√∫mero chamado: {i}")
        time.sleep(1)

# Criamos uma fun√ß√£o para printar letras:
def print_letters():
    for j in 'abcde':
        print(f"ü§óü§ó Imprimir a letra chamada: {j}")
        time.sleep(4)

# Criamos dois objetos thread:
thread_1 = threading.Thread(target=print_numbers)
thread_2 = threading.Thread(target=print_letters)

# Iniciamos os thread:
thread_1.start()
thread_2.start()

# Esperamos os thread finalizar:
thread_1.join()
thread_2.join()
print("Os dois threads terminaram")
